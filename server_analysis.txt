Matthew Mancuso
April 11, 2012 (4407)

Abstract
------------------------
	The purpose of this document is to provide an analysis of the performance breakdown of our simple server. Determining where the time is being spent,  what is causing bottlenecks to form and hopefully what can be done about it.

Testing Methodologies
------------------------
	Two main types of testing were used. The first - and most rudimentary of the two- was inserting simple timers (ticks_clock) in locations that were the usual suspects for performance issues, such as lock acquisition and functions dealing with IO.

	The second involved running a profiler (valgrind's callgrind tool) on the server while subjecting it to the same battery of tests. This helped discover performance issues in unexpected areas of the program images.

	For the benchmarks, the server was allowed to use 4 worker threads. httperf was set to send 1,000 requests per connection, using 10 connections, resulting in 10,000 total requests. The runtime for this test averaged between 10-11 seconds for completion.

Time Breakdown
------------------------
	How the server handles requests is the best place to start looking at performance. In terms of time, this is broken down into two major functions, Parser::parseRequest and HTTPServerConnection::handleRequest which take up approximately 60% and 30% respectively of the total time it takes to complete the parent function HTTPServerConnection::readDone.

	 


Shortcomings of the Test
------------------------
	The major issues with this test is it's simplicity relative to 'real word' scenarios. We arn't stressing some components of the server, like loading files from disk and thrashing the file cache, because we are requesting the same page over and over. Thus there could still be hidden scalability issues that would require a more through testing.